name: Build and Deploy Code 

on: [push, pull_request]

jobs: 
  build:
    environment:
      name: testing
    env:
      DATABASE_HOST = ${{ secrets.DATABASE_HOST }}
      DATABASE_PORT = ${{ secrets.DATABASE_PORT }}
      DATABASE_PASSWORD = ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME = ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME = ${{ secrets.DATABASE_USERNAME }}
      SECRET_KEY = ${{ secrets.SECRET_KEY }}
      ALGORITHM = ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES = ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
    
    services: 
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt
      
      - name: Run tests with Pytest
        run: |
          pip install pytest
          pytest 
      
      - name: login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
      
      - name: Image digest
        run: echo ${{ steps.buildx.outputs.digest }}
  
  deploy:
    needs: build
    environment:
      name: production
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: true
          healthcheck: /health
          appdir: .
          container_process: 'gunicorn -k uvicorn.workers.UvicornWorker main:app
      
      - name: Deploy to ubuntu server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_PASSWORD }}
          script: |
            cd app/src
            git pull 
            echo ${{ secrets.PROD_PASWWORD }} | sudo -S systemctl restart api
          

         